syntax = "proto3";

package dbci.operation;

option go_package = "github.com/mconcat/dbci/operation/types";

message Uint256 {
    bytes data = 1;
}

message Int256 {
    bytes data = 1;
}

message Dec256 {
    Uint256 significand = 1;
    uint32 exponent = 2;
}

message Asset {
    string denom = 1;
    optional Uint256 id = 2; // explicitly optional, NFT purpose
    Uint256 amount = 3;
}

message BytesPair {
    string key = 1;
    bytes value = 2;
}





// FromKeys :: Enumerable
message FromKeys {
    repeated string keys = 1;
}

// FromIterator :: Enumerable
message FromIterator {
    repeated string prefix = 1;
    string from = 2;
    string to = 3;
    bool ascending = 4;
}

message EnumerableFrom {
    oneof from {
        FromKeys keys = 1;
        FromIterator iterator = 2;
    }
}

// FunctionHighorder takes a single unary function and lifts it to list level
// or processes the enumeration without a base function
// FunctionEnumerable can be used both on list element and enumeration stream
message FunctionEnumerable {
    enum FunctionType {
        UNKNOWN = 0;
        MAP = 1; // Lift T -> U, pure
        FILTER = 2; // Lift T -> bool, pure
        FOLD = 3; // Lift [T] -> U, pure
        TAKE = 4; // Nullary, pure
        TAKEWHILE = 5; // Lift T -> bool, pure
        TAKEFIRST = 6; // Nullary, returns single, pure
        TAKELAST = 7; // pure
        DROP = 8; // pure
        DROPWHILE = 9; // pure
        FOREACH = 10; // Lift T -> U, effectful
        CONCAT = 11; // pure
        FLATMAP = 12; // MAP andthen CONCAT, fn should return enumerable
        SETALL = 13; // effectful
        DELETEALL = 14; // effectful
    }
    FunctionType type = 1;
    FunctionSingle function = 2;
}

/*
// FunctionSplit :: (a -> b) -> (a -> c) -> .. -> merge ((b, c, ..) -> d) -> (a -> d)
// Use FunctionSplit to simulate Join operations
message FunctionSplit {
    repeated Function fn = 1;
    Function merge = 2;
}
*/


message OperationEnumerable {
    enum OperationType {
        UNKNOWN = 0;
        SELECT = 1;
        SET = 2;
        DELETE = 3;
        // create depends on the type of enumerable. 
        // for mapping enumerable, the elem is stored under the primitive key
        // for queue enumerable, the elem is stored at the last position
        CREATE = 4; 
    }
    OperationType type = 1;
    EnumerableFrom from = 2;
    repeated FunctionEnumerable function = 3;
}

message QueryEnumerableRequest {
    repeated OperationEnumerable ops = 1;
}

message QueryEnumerableResponse {
    repeated BytesPair pairs = 1;    
}

service QueryEnumerableService {
    rpc QueryEnumerable(QueryEnumerableRequest) returns (QueryEnumerableResponse);
}

// QuerySingleRequest{ []OperationSingle{ { SingleFrom{key}, []FunctionSingle{ FunctionNumeric{ ... } } } } } }

// FromKey :: Single
message FromKey {
    string key = 1;
}

message FromConstant {
    string key = 1;
    bytes value = 2;
}

message SingleFrom {
    oneof from {
        FromKey key = 1;
    }
}

// FunctionNumeric :: Numeric -> Numeric
message FunctionNumeric {
    enum Operator {
        UNKNOWN = 0;
        ADD = 1;
        SUB = 2;
        SUBFROM = 3;
        MUL = 4;
        DIV = 5;
        LT = 6;
        LTE = 7;
        GT = 8;
        GTE = 9;
        EQ = 10;
        NEQ = 11;
    }
    Operator operator = 1;
    oneof operand {
        uint64 uint64Operand = 2;
        int64 int64Operand = 3;
        Uint256 Uint256Operand = 4;
        Int256 Int256Operand = 5;
    }
}

message FunctionBoolean {
    enum Operator {
        UNKNOWN = 0;
        AND = 1;
        OR = 2;
        XOR = 3;
        NOT = 4;
    }
    Operator operator = 1;
    repeated FunctionSingle function = 2;
}

// FunctionSelectField ::
// a, b proto.Message => a -> b
// This is equal with FieldDescriptor, I just couldnt found how to import it properly
message FunctionSelectField {
    int32 fieldNumber = 1;
    int32 fieldType = 2; // int8, consider switching to enum
}

message FunctionSingle {
    oneof funciton {
        FunctionNumeric numeric = 1; // Numeric -> Numeric
        FunctionSelectField selectField = 2;
        FunctionBoolean boolean = 3;
        // FunctionSplit split = 4;
    } 
}

message OperationSingle {
    enum OperationType {
        UNKNOWN = 0;
        SELECT = 1;
        SET = 2;
        DELETE = 3;
    }
    OperationType type = 1;
    string account = 2;
    SingleFrom from = 3;
    repeated FunctionSingle functions = 4;
}

message QuerySingleRequest {
    repeated OperationSingle ops = 1;
}

message QuerySingleResponse {
    BytesPair pair = 1;
}

service QuerySingleService {
    rpc QuerySingle(QuerySingleRequest) returns (QuerySingleResponse);
}

// in progress

message OperationAccount {
    enum OperationType {
        UNKNOWN = 0;
        CREATE = 1;
        DESTRUCT = 2;
        SUBACCOUNT = 3;
        LOCK = 4;
        UNLOCK = 5;
    }
    OperationType type = 1;
}
