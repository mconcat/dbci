// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package types

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QueryEnumerableServiceClient is the client API for QueryEnumerableService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryEnumerableServiceClient interface {
	QueryEnumerable(ctx context.Context, in *QueryEnumerableRequest, opts ...grpc.CallOption) (*QueryEnumerableResponse, error)
}

type queryEnumerableServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryEnumerableServiceClient(cc grpc.ClientConnInterface) QueryEnumerableServiceClient {
	return &queryEnumerableServiceClient{cc}
}

func (c *queryEnumerableServiceClient) QueryEnumerable(ctx context.Context, in *QueryEnumerableRequest, opts ...grpc.CallOption) (*QueryEnumerableResponse, error) {
	out := new(QueryEnumerableResponse)
	err := c.cc.Invoke(ctx, "/dbci.operation.QueryEnumerableService/QueryEnumerable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryEnumerableServiceServer is the server API for QueryEnumerableService service.
// All implementations must embed UnimplementedQueryEnumerableServiceServer
// for forward compatibility
type QueryEnumerableServiceServer interface {
	QueryEnumerable(context.Context, *QueryEnumerableRequest) (*QueryEnumerableResponse, error)
	mustEmbedUnimplementedQueryEnumerableServiceServer()
}

// UnimplementedQueryEnumerableServiceServer must be embedded to have forward compatible implementations.
type UnimplementedQueryEnumerableServiceServer struct {
}

func (UnimplementedQueryEnumerableServiceServer) QueryEnumerable(context.Context, *QueryEnumerableRequest) (*QueryEnumerableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryEnumerable not implemented")
}
func (UnimplementedQueryEnumerableServiceServer) mustEmbedUnimplementedQueryEnumerableServiceServer() {
}

// UnsafeQueryEnumerableServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryEnumerableServiceServer will
// result in compilation errors.
type UnsafeQueryEnumerableServiceServer interface {
	mustEmbedUnimplementedQueryEnumerableServiceServer()
}

func RegisterQueryEnumerableServiceServer(s grpc.ServiceRegistrar, srv QueryEnumerableServiceServer) {
	s.RegisterService(&QueryEnumerableService_ServiceDesc, srv)
}

func _QueryEnumerableService_QueryEnumerable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEnumerableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryEnumerableServiceServer).QueryEnumerable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbci.operation.QueryEnumerableService/QueryEnumerable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryEnumerableServiceServer).QueryEnumerable(ctx, req.(*QueryEnumerableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QueryEnumerableService_ServiceDesc is the grpc.ServiceDesc for QueryEnumerableService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QueryEnumerableService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dbci.operation.QueryEnumerableService",
	HandlerType: (*QueryEnumerableServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryEnumerable",
			Handler:    _QueryEnumerableService_QueryEnumerable_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/operation.proto",
}

// QuerySingleServiceClient is the client API for QuerySingleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuerySingleServiceClient interface {
	QuerySingle(ctx context.Context, in *QuerySingleRequest, opts ...grpc.CallOption) (*QuerySingleResponse, error)
}

type querySingleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQuerySingleServiceClient(cc grpc.ClientConnInterface) QuerySingleServiceClient {
	return &querySingleServiceClient{cc}
}

func (c *querySingleServiceClient) QuerySingle(ctx context.Context, in *QuerySingleRequest, opts ...grpc.CallOption) (*QuerySingleResponse, error) {
	out := new(QuerySingleResponse)
	err := c.cc.Invoke(ctx, "/dbci.operation.QuerySingleService/QuerySingle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuerySingleServiceServer is the server API for QuerySingleService service.
// All implementations must embed UnimplementedQuerySingleServiceServer
// for forward compatibility
type QuerySingleServiceServer interface {
	QuerySingle(context.Context, *QuerySingleRequest) (*QuerySingleResponse, error)
	mustEmbedUnimplementedQuerySingleServiceServer()
}

// UnimplementedQuerySingleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedQuerySingleServiceServer struct {
}

func (UnimplementedQuerySingleServiceServer) QuerySingle(context.Context, *QuerySingleRequest) (*QuerySingleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuerySingle not implemented")
}
func (UnimplementedQuerySingleServiceServer) mustEmbedUnimplementedQuerySingleServiceServer() {}

// UnsafeQuerySingleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuerySingleServiceServer will
// result in compilation errors.
type UnsafeQuerySingleServiceServer interface {
	mustEmbedUnimplementedQuerySingleServiceServer()
}

func RegisterQuerySingleServiceServer(s grpc.ServiceRegistrar, srv QuerySingleServiceServer) {
	s.RegisterService(&QuerySingleService_ServiceDesc, srv)
}

func _QuerySingleService_QuerySingle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySingleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuerySingleServiceServer).QuerySingle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbci.operation.QuerySingleService/QuerySingle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuerySingleServiceServer).QuerySingle(ctx, req.(*QuerySingleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QuerySingleService_ServiceDesc is the grpc.ServiceDesc for QuerySingleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QuerySingleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dbci.operation.QuerySingleService",
	HandlerType: (*QuerySingleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QuerySingle",
			Handler:    _QuerySingleService_QuerySingle_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/operation.proto",
}
